{
  "consumes": [
    "application/json",
    "application/x-www-form-urlencoded"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Welcome to the Ory Kratos HTTP API documentation!",
    "title": "Ory Kratos",
    "version": "latest"
  },
  "basePath": "/",
  "paths": {
    "/health/alive": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running.\nThis status does currently not include checks whether the database connection is working.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check alive status",
        "operationId": "isInstanceAlive",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "500": {
            "description": "genericError",
            "schema": {
              "$ref": "#/definitions/genericError"
            }
          }
        }
      }
    },
    "/health/ready": {
      "get": {
        "description": "This endpoint returns a 200 status code when the HTTP server is up running and the environment dependencies (e.g.\nthe database) are responsive as well.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "health"
        ],
        "summary": "Check readiness status",
        "operationId": "isInstanceReady",
        "responses": {
          "200": {
            "description": "healthStatus",
            "schema": {
              "$ref": "#/definitions/healthStatus"
            }
          },
          "503": {
            "description": "healthNotReadyStatus",
            "schema": {
              "$ref": "#/definitions/healthNotReadyStatus"
            }
          }
        }
      }
    },
    "/identities": {
      "get": {
        "security": [
          {
            "oryAccessToken": []
          }
        ],
        "description": "Lists all identities. Does not support search at the moment.\n\nLearn how identities work in [Ory Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "List Identities",
        "operationId": "adminListIdentities",
        "parameters": [
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "Items per Page\n\nThis is the number of items per page.",
            "name": "per_page",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "default": 0,
            "description": "Pagination Page",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "identityList",
            "schema": {
              "$ref": "#/definitions/identityList"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "oryAccessToken": []
          }
        ],
        "description": "This endpoint creates an identity. It is NOT possible to set an identity's credentials (password, ...)\nusing this method! A way to achieve that will be introduced in the future.\n\nLearn how identities work in [Ory Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Create an Identity",
        "operationId": "adminCreateIdentity",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/adminCreateIdentityBody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "identity",
            "schema": {
              "$ref": "#/definitions/identity"
            }
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "409": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/identities/{id}": {
      "get": {
        "security": [
          {
            "oryAccessToken": []
          }
        ],
        "description": "Learn how identities work in [Ory Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Get an Identity",
        "operationId": "adminGetIdentity",
        "parameters": [
          {
            "type": "string",
            "description": "ID must be set to the ID of identity you want to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "identity",
            "schema": {
              "$ref": "#/definitions/identity"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "oryAccessToken": []
          }
        ],
        "description": "This endpoint updates an identity. It is NOT possible to set an identity's credentials (password, ...)\nusing this method! A way to achieve that will be introduced in the future.\n\nThe full identity payload (except credentials) is expected. This endpoint does not support patching.\n\nLearn how identities work in [Ory Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Update an Identity",
        "operationId": "adminUpdateIdentity",
        "parameters": [
          {
            "type": "string",
            "description": "ID must be set to the ID of identity you want to update",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/AdminUpdateIdentityBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "identity",
            "schema": {
              "$ref": "#/definitions/identity"
            }
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "409": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "oryAccessToken": []
          }
        ],
        "description": "Calling this endpoint irrecoverably and permanently deletes the identity given its ID. This action can not be undone.\nThis endpoint returns 204 when the identity was deleted or when the identity was not found, in which case it is\nassumed that is has been deleted already.\n\nLearn how identities work in [Ory Kratos' User And Identity Model Documentation](https://www.ory.sh/docs/next/kratos/concepts/identity-user-model).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Delete an Identity",
        "operationId": "adminDeleteIdentity",
        "parameters": [
          {
            "type": "string",
            "description": "ID is the identity's ID.",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/metrics/prometheus": {
      "get": {
        "description": "```\nmetadata:\nannotations:\nprometheus.io/port: \"4434\"\nprometheus.io/path: \"/metrics/prometheus\"\n```",
        "produces": [
          "plain/text"
        ],
        "tags": [
          "metadata"
        ],
        "summary": "Get snapshot metrics from the service. If you're using k8s, you can then add annotations to\nyour deployment like so:",
        "operationId": "prometheus",
        "responses": {
          "200": {
            "$ref": "#/responses/emptyResponse"
          }
        }
      }
    },
    "/recovery/link": {
      "post": {
        "description": "This endpoint creates a recovery link which should be given to the user in order for them to recover\n(or activate) their account.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Create a Recovery Link",
        "operationId": "adminCreateSelfServiceRecoveryLink",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/adminCreateSelfServiceRecoveryLinkBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceRecoveryLink",
            "schema": {
              "$ref": "#/definitions/selfServiceRecoveryLink"
            }
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/schemas/{id}": {
      "get": {
        "description": "Get a JSON Schema",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "operationId": "getJsonSchema",
        "parameters": [
          {
            "type": "string",
            "description": "ID must be set to the ID of schema you want to get",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "jsonSchema",
            "schema": {
              "$ref": "#/definitions/jsonSchema"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/errors": {
      "get": {
        "description": "This endpoint returns the error associated with a user-facing self service errors.\n\nThis endpoint supports stub values to help you implement the error UI:\n\n`?id=stub:500` - returns a stub 500 (Internal Server Error) error.\n\nMore information can be found at [Ory Kratos User User Facing Error Documentation](https://www.ory.sh/docs/kratos/self-service/flows/user-facing-errors).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Get Self-Service Errors",
        "operationId": "getSelfServiceError",
        "parameters": [
          {
            "type": "string",
            "description": "Error is the error's ID",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceError",
            "schema": {
              "$ref": "#/definitions/selfServiceError"
            }
          },
          "403": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/login": {
      "post": {
        "description": ":::info\n\nThis endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.\n\n:::\n\nUse this endpoint to complete a login flow. This endpoint\nbehaves differently for API and browser flows.\n\nAPI flows expect `application/json` to be sent in the body and responds with\nHTTP 200 and a application/json body with the session token on success;\nHTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;\nHTTP 400 on form validation errors.\n\nBrowser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with\na HTTP 302 redirect to the post/after login URL or the `return_to` value if it was set and if the login succeeded;\na HTTP 302 redirect to the login UI URL with the flow ID containing the validation errors otherwise.\n\nBrowser flows with an accept header of `application/json` will not redirect but instead respond with\nHTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;\nHTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;\nHTTP 400 on form validation errors.\n\nMore information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "Header:",
          "Set-Cookie"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Submit a Login Flow",
        "operationId": "submitSelfServiceLoginFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Login Flow ID\n\nThe value for this parameter comes from `flow` URL Query parameter sent to your\napplication (e.g. `/login?flow=abcde`).",
            "name": "flow",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/submitSelfServiceLoginFlowBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfulSelfServiceLoginWithoutBrowser",
            "schema": {
              "$ref": "#/definitions/successfulSelfServiceLoginWithoutBrowser"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "selfServiceLoginFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceLoginFlow"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/login/api": {
      "get": {
        "description": "This endpoint initiates a login flow for API clients that do not use a browser, such as mobile devices, smart TVs, and so on.\n\nIf a valid provided session cookie or session token is provided, a 400 Bad Request error\nwill be returned unless the URL query parameter `?refresh=true` is set.\n\nTo fetch an existing login flow call `/self-service/login/flows?flow=\u003cflow_id\u003e`.\n\nYou MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server\nPages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make\nyou vulnerable to a variety of CSRF attacks, including CSRF login attacks.\n\nThis endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).\n\nMore information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Login Flow for APIs, Services, Apps, ...",
        "operationId": "initializeSelfServiceLoginFlowWithoutBrowser",
        "parameters": [
          {
            "type": "boolean",
            "description": "Refresh a login session\n\nIf set to true, this will refresh an existing login session by\nasking the user to sign in again. This will reset the\nauthenticated_at time of the session.",
            "name": "refresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceLoginFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceLoginFlow"
            }
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/login/browser": {
      "get": {
        "description": "This endpoint initializes a browser-based user login flow. This endpoint will set the appropriate\ncookies and anti-CSRF measures required for browser-based flows.\n\nIf this endpoint is opened as a link in the browser, it will be redirected to\n`selfservice.flows.login.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session\nexists already, the browser will be redirected to `urls.default_redirect_url` unless the query parameter\n`?refresh=true` was set.\n\nIf this endpoint is called via an AJAX request, the response contains the login flow without a redirect.\n\nThis endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.\n\nMore information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Login Flow for Browsers",
        "operationId": "initializeSelfServiceLoginFlowForBrowsers",
        "parameters": [
          {
            "type": "boolean",
            "description": "Refresh a login session\n\nIf set to true, this will refresh an existing login session by\nasking the user to sign in again. This will reset the\nauthenticated_at time of the session.",
            "name": "refresh",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceLoginFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceLoginFlow"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/login/flows": {
      "get": {
        "description": "This endpoint returns a login flow's context with, for example, error details and other information.\n\nBrowser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.\nFor AJAX requests you must ensure that cookies are included in the request or requests will fail.\n\nIf you use the browser-flow for server-side apps, the services need to run on a common top-level-domain\nand you need to forward the incoming HTTP Cookie header to this endpoint:\n\n```js\npseudo-code example\nrouter.get('/login', async function (req, res) {\nconst flow = await client.getSelfServiceLoginFlow(req.header('cookie'), req.query['flow'])\n\nres.render('login', flow)\n})\n```\n\nMore information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Get Login Flow",
        "operationId": "getSelfServiceLoginFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Login Flow ID\n\nThe value for this parameter comes from `flow` URL Query parameter sent to your\napplication (e.g. `/login?flow=abcde`).",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "HTTP Cookies\n\nWhen using the SDK on the server side you must include the HTTP Cookie Header\noriginally sent to your HTTP handler here.",
            "name": "cookie",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceLoginFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceLoginFlow"
            }
          },
          "403": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "410": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/logout": {
      "get": {
        "description": "This endpoint logs out an identity in a self-service manner.\n\nIf the `Accept` HTTP header is not set to `application/json`, the browser will be redirected (HTTP 302 Found)\nto the `return_to` parameter of the initial request or fall back to `urls.default_return_to`.\n\nIf the `Accept` HTTP header is set to `application/json`, a 204 No Content response\nwill be sent on successful logout instead.\n\nThis endpoint is NOT INTENDED for API clients and only works\nwith browsers (Chrome, Firefox, ...). For API clients you can\ncall the `/self-service/logout/api` URL directly with the Ory Session Token.\n\nMore information can be found at [Ory Kratos User Logout Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-logout).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Complete Self-Service Logout",
        "operationId": "submitSelfServiceLogoutFlow",
        "parameters": [
          {
            "type": "string",
            "description": "A Valid Logout Token\n\nIf you do not have a logout token because you only have a session cookie,\ncall `/self-service/logout/urls` to generate a URL for this endpoint.",
            "name": "token",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/logout/api": {
      "delete": {
        "description": "Use this endpoint to log out an identity using an Ory Session Token. If the Ory Session Token was successfully\nrevoked, the server returns a 204 No Content response. A 204 No Content response is also sent when\nthe Ory Session Token has been revoked already before.\n\nIf the Ory Session Token is malformed or does not exist a 403 Forbidden response will be returned.\n\nThis endpoint does not remove any HTTP\nCookies - use the Browser-Based Self-Service Logout Flow instead.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Perform Logout for APIs, Services, Apps, ...",
        "operationId": "submitSelfServiceLogoutFlowWithoutBrowser",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/submitSelfServiceLogoutFlowWithoutBrowserBody"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/logout/browser": {
      "get": {
        "description": "This endpoint initializes a browser-based user logout flow and a URL which can be used to log out the user.\n\nThis endpoint is NOT INTENDED for API clients and only works\nwith browsers (Chrome, Firefox, ...). For API clients you can\ncall the `/self-service/logout/api` URL directly with the Ory Session Token.\n\nThe URL is only valid for the currently signed in user. If no user is signed in, this endpoint returns\na 401 error.\n\nWhen calling this endpoint from a backend, please ensure to properly forward the HTTP cookies.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Create a Logout URL for Browsers",
        "operationId": "createSelfServiceLogoutFlowUrlForBrowsers",
        "parameters": [
          {
            "type": "string",
            "description": "HTTP Cookies\n\nIf you call this endpoint from a backend, please include the\noriginal Cookie header in the request.",
            "name": "cookie",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceLogoutUrl",
            "schema": {
              "$ref": "#/definitions/selfServiceLogoutUrl"
            }
          },
          "401": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/recovery": {
      "post": {
        "description": "Use this endpoint to complete a recovery flow. This endpoint\nbehaves differently for API and browser flows and has several states:\n\n`choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent\nand works with API- and Browser-initiated flows.\nFor API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid.\nand a HTTP 302 Found redirect with a fresh recovery flow if the flow was otherwise invalid (e.g. expired).\nFor Browser clients without HTTP Header `Accept` or with `Accept: text/*` it returns a HTTP 302 Found redirect to the Recovery UI URL with the Recovery Flow ID appended.\n`sent_email` is the success state after `choose_method` for the `link` method and allows the user to request another recovery email. It\nworks for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state.\n`passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a recovery link\")\ndoes not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL\n(if the link was valid) and instructs the user to update their password, or a redirect to the Recover UI URL with\na new Recovery Flow ID which contains an error message that the recovery link was invalid.\n\nMore information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Complete Recovery Flow",
        "operationId": "submitSelfServiceRecoveryFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Recovery Flow ID\n\nThe value for this parameter comes from `flow` URL Query parameter sent to your\napplication (e.g. `/recovery?flow=abcde`).",
            "name": "flow",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Recovery Token\n\nThe recovery token which completes the recovery request. If the token\nis invalid (e.g. expired) an error will be shown to the end-user.\n\nThis parameter is usually set in a link and not used by any direct API call.",
            "name": "token",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/submitSelfServiceRecoveryFlowBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceRecoveryFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRecoveryFlow"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "selfServiceRecoveryFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRecoveryFlow"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/recovery/api": {
      "get": {
        "description": "This endpoint initiates a recovery flow for API clients such as mobile devices, smart TVs, and so on.\n\nIf a valid provided session cookie or session token is provided, a 400 Bad Request error.\n\nTo fetch an existing recovery flow call `/self-service/recovery/flows?flow=\u003cflow_id\u003e`.\n\nYou MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server\nPages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make\nyou vulnerable to a variety of CSRF attacks.\n\nThis endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).\n\n\nMore information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Recovery Flow for APIs, Services, Apps, ...",
        "operationId": "initializeSelfServiceRecoveryFlowWithoutBrowser",
        "responses": {
          "200": {
            "description": "selfServiceRecoveryFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRecoveryFlow"
            }
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/recovery/browser": {
      "get": {
        "description": "This endpoint initializes a browser-based account recovery flow. Once initialized, the browser will be redirected to\n`selfservice.flows.recovery.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session\nexists, the browser is returned to the configured return URL.\n\nIf this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects\nor a 400 bad request error if the user is already authenticated.\n\nThis endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.\n\nMore information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Recovery Flow for Browsers",
        "operationId": "initializeSelfServiceRecoveryFlowForBrowsers",
        "responses": {
          "200": {
            "description": "selfServiceRecoveryFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRecoveryFlow"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/recovery/flows": {
      "get": {
        "description": "This endpoint returns a recovery flow's context with, for example, error details and other information.\n\nBrowser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.\nFor AJAX requests you must ensure that cookies are included in the request or requests will fail.\n\nIf you use the browser-flow for server-side apps, the services need to run on a common top-level-domain\nand you need to forward the incoming HTTP Cookie header to this endpoint:\n\n```js\npseudo-code example\nrouter.get('/recovery', async function (req, res) {\nconst flow = await client.getSelfServiceRecoveryFlow(req.header('Cookie'), req.query['flow'])\n\nres.render('recovery', flow)\n})\n```\n\nMore information can be found at [Ory Kratos Account Recovery Documentation](../self-service/flows/account-recovery.mdx).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Get Recovery Flow",
        "operationId": "getSelfServiceRecoveryFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Flow ID\n\nThe value for this parameter comes from `request` URL Query parameter sent to your\napplication (e.g. `/recovery?flow=abcde`).",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "HTTP Cookies\n\nWhen using the SDK on the server side you must include the HTTP Cookie Header\noriginally sent to your HTTP handler here.",
            "name": "cookie",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceRecoveryFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRecoveryFlow"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "410": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/registration": {
      "post": {
        "description": "Use this endpoint to complete a registration flow by sending an identity's traits and password. This endpoint\nbehaves differently for API and browser flows.\n\nAPI flows expect `application/json` to be sent in the body and respond with\nHTTP 200 and a application/json body with the created identity success - if the session hook is configured the\n`session` and `session_token` will also be included;\nHTTP 302 redirect to a fresh registration flow if the original flow expired with the appropriate error messages set;\nHTTP 400 on form validation errors.\n\nBrowser flows expect a Content-Type of `application/x-www-form-urlencoded` or `application/json` to be sent in the body and respond with\na HTTP 302 redirect to the post/after registration URL or the `return_to` value if it was set and if the registration succeeded;\na HTTP 302 redirect to the registration UI URL with the flow ID containing the validation errors otherwise.\n\nBrowser flows with an accept header of `application/json` will not redirect but instead respond with\nHTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;\nHTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;\nHTTP 400 on form validation errors.\n\nMore information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Submit a Registration Flow",
        "operationId": "submitSelfServiceRegistrationFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Registration Flow ID\n\nThe value for this parameter comes from `flow` URL Query parameter sent to your\napplication (e.g. `/registration?flow=abcde`).",
            "name": "flow",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/submitSelfServiceRegistrationFlowBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfulSelfServiceRegistrationWithoutBrowser",
            "schema": {
              "$ref": "#/definitions/successfulSelfServiceRegistrationWithoutBrowser"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "selfServiceRegistrationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRegistrationFlow"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/registration/api": {
      "get": {
        "description": "This endpoint initiates a registration flow for API clients such as mobile devices, smart TVs, and so on.\n\nIf a valid provided session cookie or session token is provided, a 400 Bad Request error\nwill be returned unless the URL query parameter `?refresh=true` is set.\n\nTo fetch an existing registration flow call `/self-service/registration/flows?flow=\u003cflow_id\u003e`.\n\nYou MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server\nPages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make\nyou vulnerable to a variety of CSRF attacks.\n\nThis endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).\n\nMore information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Registration Flow for APIs, Services, Apps, ...",
        "operationId": "initializeSelfServiceRegistrationFlowWithoutBrowser",
        "responses": {
          "200": {
            "description": "selfServiceRegistrationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRegistrationFlow"
            }
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/registration/browser": {
      "get": {
        "description": "This endpoint initializes a browser-based user registration flow. This endpoint will set the appropriate\ncookies and anti-CSRF measures required for browser-based flows.\n\n:::info\n\nThis endpoint is EXPERIMENTAL and subject to potential breaking changes in the future.\n\n:::\n\nIf this endpoint is opened as a link in the browser, it will be redirected to\n`selfservice.flows.registration.ui_url` with the flow ID set as the query parameter `?flow=`. If a valid user session\nexists already, the browser will be redirected to `urls.default_redirect_url`.\n\nIf this endpoint is called via an AJAX request, the response contains the registration flow without a redirect.\n\nThis endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.\n\nMore information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Registration Flow for Browsers",
        "operationId": "initializeSelfServiceRegistrationFlowForBrowsers",
        "responses": {
          "200": {
            "description": "selfServiceRegistrationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRegistrationFlow"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/registration/flows": {
      "get": {
        "description": "This endpoint returns a registration flow's context with, for example, error details and other information.\n\nBrowser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.\nFor AJAX requests you must ensure that cookies are included in the request or requests will fail.\n\nIf you use the browser-flow for server-side apps, the services need to run on a common top-level-domain\nand you need to forward the incoming HTTP Cookie header to this endpoint:\n\n```js\npseudo-code example\nrouter.get('/registration', async function (req, res) {\nconst flow = await client.getSelfServiceRegistrationFlow(req.header('cookie'), req.query['flow'])\n\nres.render('registration', flow)\n})\n```\n\nMore information can be found at [Ory Kratos User Login and User Registration Documentation](https://www.ory.sh/docs/next/kratos/self-service/flows/user-login-user-registration).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Get Registration Flow",
        "operationId": "getSelfServiceRegistrationFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Registration Flow ID\n\nThe value for this parameter comes from `flow` URL Query parameter sent to your\napplication (e.g. `/registration?flow=abcde`).",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "HTTP Cookies\n\nWhen using the SDK on the server side you must include the HTTP Cookie Header\noriginally sent to your HTTP handler here.",
            "name": "cookie",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceRegistrationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceRegistrationFlow"
            }
          },
          "403": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "410": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/settings": {
      "post": {
        "security": [
          {
            "sessionToken": []
          }
        ],
        "description": "Use this endpoint to complete a settings flow by sending an identity's updated password. This endpoint\nbehaves differently for API and browser flows.\n\nAPI-initiated flows expect `application/json` to be sent in the body and respond with\nHTTP 200 and an application/json body with the session token on success;\nHTTP 302 redirect to a fresh settings flow if the original flow expired with the appropriate error messages set;\nHTTP 400 on form validation errors.\nHTTP 401 when the endpoint is called without a valid session token.\nHTTP 403 when `selfservice.flows.settings.privileged_session_max_age` was reached.\nImplies that the user needs to re-authenticate.\n\nBrowser flows without HTTP Header `Accept` or with `Accept: text/*` respond with\na HTTP 302 redirect to the post/after settings URL or the `return_to` value if it was set and if the flow succeeded;\na HTTP 302 redirect to the Settings UI URL with the flow ID containing the validation errors otherwise.\na HTTP 302 redirect to the login endpoint when `selfservice.flows.settings.privileged_session_max_age` was reached.\n\nBrowser flows with HTTP Header `Accept: application/json` respond with\nHTTP 200 and a application/json body with the signed in identity and a `Set-Cookie` header on success;\nHTTP 302 redirect to a fresh login flow if the original flow expired with the appropriate error messages set;\nHTTP 403 when the page is accessed without a session cookie.\nHTTP 400 on form validation errors.\n\nMore information can be found at [Ory Kratos User Settings \u0026 Profile Management Documentation](../self-service/flows/user-settings).",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Complete Settings Flow",
        "operationId": "submitSelfServiceSettingsFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Settings Flow ID\n\nThe value for this parameter comes from `flow` URL Query parameter sent to your\napplication (e.g. `/settings?flow=abcde`).",
            "name": "flow",
            "in": "query",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/submitSelfServiceSettingsFlowBody"
            }
          },
          {
            "type": "string",
            "description": "The Session Token of the Identity performing the settings flow.",
            "name": "X-Session-Token",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "successfulSelfServiceSettingsWithoutBrowser",
            "schema": {
              "$ref": "#/definitions/successfulSelfServiceSettingsWithoutBrowser"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "selfServiceSettingsFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceSettingsFlow"
            }
          },
          "401": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "403": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/settings/api": {
      "get": {
        "description": "This endpoint initiates a settings flow for API clients such as mobile devices, smart TVs, and so on.\nYou must provide a valid Ory Kratos Session Token for this endpoint to respond with HTTP 200 OK.\n\nTo fetch an existing settings flow call `/self-service/settings/flows?flow=\u003cflow_id\u003e`.\n\nYou MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server\nPages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make\nyou vulnerable to a variety of CSRF attacks.\n\nThis endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).\n\nMore information can be found at [Ory Kratos User Settings \u0026 Profile Management Documentation](../self-service/flows/user-settings).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Settings Flow for APIs, Services, Apps, ...",
        "operationId": "initializeSelfServiceSettingsFlowWithoutBrowser",
        "parameters": [
          {
            "type": "string",
            "description": "The Session Token of the Identity performing the settings flow.",
            "name": "X-Session-Token",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceSettingsFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceSettingsFlow"
            }
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/settings/browser": {
      "get": {
        "description": "This endpoint initializes a browser-based user settings flow. Once initialized, the browser will be redirected to\n`selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid\nOry Kratos Session Cookie is included in the request, a login flow will be initialized.\n\nIf this endpoint is opened as a link in the browser, it will be redirected to\n`selfservice.flows.settings.ui_url` with the flow ID set as the query parameter `?flow=`. If no valid user session\nwas set, the browser will be redirected to the login endpoint.\n\nIf this endpoint is called via an AJAX request, the response contains the settings flow without any redirects\nor a 403 forbidden error if no valid session was set.\n\nThis endpoint is NOT INTENDED for clients that do not have a browser (Chrome, Firefox, ...) as cookies are needed.\n\nMore information can be found at [Ory Kratos User Settings \u0026 Profile Management Documentation](../self-service/flows/user-settings).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Settings Flow for Browsers",
        "operationId": "initializeSelfServiceSettingsFlowForBrowsers",
        "parameters": [
          {
            "type": "string",
            "description": "The Session Cookie of the Identity performing the settings flow.",
            "name": "Cookie",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceSettingsFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceSettingsFlow"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "403": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/settings/flows": {
      "get": {
        "description": "When accessing this endpoint through Ory Kratos' Public API you must ensure that either the Ory Kratos Session Cookie\nor the Ory Kratos Session Token are set. The public endpoint does not return 404 status codes\nbut instead 403 or 500 to improve data privacy.\n\nYou can access this endpoint without credentials when using Ory Kratos' Admin API.\n\nMore information can be found at [Ory Kratos User Settings \u0026 Profile Management Documentation](../self-service/flows/user-settings).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Get Settings Flow",
        "operationId": "getSelfServiceSettingsFlow",
        "parameters": [
          {
            "type": "string",
            "description": "ID is the Settings Flow ID\n\nThe value for this parameter comes from `flow` URL Query parameter sent to your\napplication (e.g. `/settings?flow=abcde`).",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The Session Token\n\nWhen using the SDK in an app without a browser, please include the\nsession token here.",
            "name": "X-Session-Token",
            "in": "header"
          },
          {
            "type": "string",
            "description": "HTTP Cookies\n\nWhen using the SDK on the server side you must include the HTTP Cookie Header\noriginally sent to your HTTP handler here. You only need to do this for browser-\nbased flows.",
            "name": "cookie",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceSettingsFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceSettingsFlow"
            }
          },
          "403": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "410": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/verification": {
      "post": {
        "description": "Use this endpoint to complete a verification flow. This endpoint\nbehaves differently for API and browser flows and has several states:\n\n`choose_method` expects `flow` (in the URL query) and `email` (in the body) to be sent\nand works with API- and Browser-initiated flows.\nFor API clients and Browser clients with HTTP Header `Accept: application/json` it either returns a HTTP 200 OK when the form is valid and HTTP 400 OK when the form is invalid\nand a HTTP 302 Found redirect with a fresh verification flow if the flow was otherwise invalid (e.g. expired).\nFor Browser clients without HTTP Header `Accept` or with `Accept: text/*` it returns a HTTP 302 Found redirect to the Verification UI URL with the Verification Flow ID appended.\n`sent_email` is the success state after `choose_method` when using the `link` method and allows the user to request another verification email. It\nworks for both API and Browser-initiated flows and returns the same responses as the flow in `choose_method` state.\n`passed_challenge` expects a `token` to be sent in the URL query and given the nature of the flow (\"sending a verification link\")\ndoes not have any API capabilities. The server responds with a HTTP 302 Found redirect either to the Settings UI URL\n(if the link was valid) and instructs the user to update their password, or a redirect to the Verification UI URL with\na new Verification Flow ID which contains an error message that the verification link was invalid.\n\nMore information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).",
        "consumes": [
          "application/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Complete Verification Flow",
        "operationId": "submitSelfServiceVerificationFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Verification Flow ID\n\nThe value for this parameter comes from `flow` URL Query parameter sent to your\napplication (e.g. `/verification?flow=abcde`).",
            "name": "flow",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Verification Token\n\nThe verification token which completes the verification request. If the token\nis invalid (e.g. expired) an error will be shown to the end-user.\n\nThis parameter is usually set in a link and not used by any direct API call.",
            "name": "token",
            "in": "query"
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/submitSelfServiceVerificationFlowBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceVerificationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceVerificationFlow"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "400": {
            "description": "selfServiceVerificationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceVerificationFlow"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/verification/api": {
      "get": {
        "description": "This endpoint initiates a verification flow for API clients such as mobile devices, smart TVs, and so on.\n\nTo fetch an existing verification flow call `/self-service/verification/flows?flow=\u003cflow_id\u003e`.\n\nYou MUST NOT use this endpoint in client-side (Single Page Apps, ReactJS, AngularJS) nor server-side (Java Server\nPages, NodeJS, PHP, Golang, ...) browser applications. Using this endpoint in these applications will make\nyou vulnerable to a variety of CSRF attacks.\n\nThis endpoint MUST ONLY be used in scenarios such as native mobile apps (React Native, Objective C, Swift, Java, ...).\n\nMore information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Verification Flow for APIs, Services, Apps, ...",
        "operationId": "initializeSelfServiceVerificationFlowWithoutBrowser",
        "responses": {
          "200": {
            "description": "selfServiceVerificationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceVerificationFlow"
            }
          },
          "400": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/verification/browser": {
      "get": {
        "description": "This endpoint initializes a browser-based account verification flow. Once initialized, the browser will be redirected to\n`selfservice.flows.verification.ui_url` with the flow ID set as the query parameter `?flow=`.\n\nIf this endpoint is called via an AJAX request, the response contains the recovery flow without any redirects.\n\nThis endpoint is NOT INTENDED for API clients and only works with browsers (Chrome, Firefox, ...).\n\nMore information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).",
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Initialize Verification Flow for Browser Clients",
        "operationId": "initializeSelfServiceVerificationFlowForBrowsers",
        "responses": {
          "200": {
            "description": "selfServiceVerificationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceVerificationFlow"
            }
          },
          "302": {
            "$ref": "#/responses/emptyResponse"
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/self-service/verification/flows": {
      "get": {
        "description": "This endpoint returns a verification flow's context with, for example, error details and other information.\n\nBrowser flows expect the anti-CSRF cookie to be included in the request's HTTP Cookie Header.\nFor AJAX requests you must ensure that cookies are included in the request or requests will fail.\n\nIf you use the browser-flow for server-side apps, the services need to run on a common top-level-domain\nand you need to forward the incoming HTTP Cookie header to this endpoint:\n\n```js\npseudo-code example\nrouter.get('/recovery', async function (req, res) {\nconst flow = await client.getSelfServiceVerificationFlow(req.header('cookie'), req.query['flow'])\n\nres.render('verification', flow)\n})\n\nMore information can be found at [Ory Kratos Email and Phone Verification Documentation](https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation).",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Get Verification Flow",
        "operationId": "getSelfServiceVerificationFlow",
        "parameters": [
          {
            "type": "string",
            "description": "The Flow ID\n\nThe value for this parameter comes from `request` URL Query parameter sent to your\napplication (e.g. `/verification?flow=abcde`).",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "HTTP Cookies\n\nWhen using the SDK on the server side you must include the HTTP Cookie Header\noriginally sent to your HTTP handler here.",
            "name": "cookie",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "selfServiceVerificationFlow",
            "schema": {
              "$ref": "#/definitions/selfServiceVerificationFlow"
            }
          },
          "403": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "404": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/sessions/whoami": {
      "get": {
        "description": "Uses the HTTP Headers in the GET request to determine (e.g. by using checking the cookies) who is authenticated.\nReturns a session object in the body or 401 if the credentials are invalid or no credentials were sent.\nAdditionally when the request it successful it adds the user ID to the 'X-Kratos-Authenticated-Identity-Id' header in the response.\n\nIf you call this endpoint from a server-side application, you must forward the HTTP Cookie Header to this endpoint:\n\n```js\npseudo-code example\nrouter.get('/protected-endpoint', async function (req, res) {\nconst session = await client.toSession(undefined, req.header('cookie'))\n\nconsole.log(session)\n})\n```\n\nWhen calling this endpoint from a non-browser application (e.g. mobile app) you must include the session token:\n\n```js\npseudo-code example\n...\nconst session = await client.toSession(\"the-session-token\")\n\nconsole.log(session)\n```\n\nThis endpoint is useful for:\n\nAJAX calls. Remember to send credentials and set up CORS correctly!\nReverse proxies and API Gateways\nServer-side calls - use the `X-Session-Token` header!\n\nThis endpoint authenticates users by checking\n\nif the `Cookie` HTTP header was set containing an Ory Kratos Session Cookie;\nif the `Authorization: bearer \u003cory-session-token\u003e` HTTP header was set with a valid Ory Kratos Session Token;\nif the `X-Session-Token` HTTP header was set with a valid Ory Kratos Session Token.\n\nIf none of these headers are set or the cooke or token are invalid, the endpoint returns a HTTP 401 status code.",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "http",
          "https"
        ],
        "tags": [
          "v0alpha1"
        ],
        "summary": "Check Who the Current HTTP Session Belongs To",
        "operationId": "toSession",
        "parameters": [
          {
            "type": "string",
            "description": "Set the Session Token when calling from non-browser clients. A session token has a format of `MP2YWEMeM8MxjkGKpH4dqOQ4Q4DlSPaj`.",
            "name": "X-Session-Token",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Set the Cookie Header. This is especially useful when calling this endpoint from a server-side application. In that\nscenario you must include the HTTP Cookie Header which originally was included in the request to your server.\nAn example of a session in the HTTP Cookie Header is: `ory_kratos_session=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9DWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f==`.\n\nIt is ok if more than one cookie are included here as all other cookies will be ignored.",
            "name": "Cookie",
            "in": "header"
          }
        ],
        "responses": {
          "200": {
            "description": "session",
            "schema": {
              "$ref": "#/definitions/session"
            }
          },
          "401": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          },
          "500": {
            "description": "jsonError",
            "schema": {
              "$ref": "#/definitions/jsonError"
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "description": "This endpoint returns the service version typically notated using semantic versioning.\n\nIf the service supports TLS Edge Termination, this endpoint does not require the\n`X-Forwarded-Proto` header to be set.\n\nBe aware that if you are running multiple nodes of this service, the health status will never\nrefer to the cluster state, only to a single instance.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "version"
        ],
        "summary": "Get service version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "version",
            "schema": {
              "$ref": "#/definitions/version"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdminUpdateIdentityBody": {
      "type": "object",
      "required": [
        "traits",
        "state"
      ],
      "properties": {
        "schema_id": {
          "description": "SchemaID is the ID of the JSON Schema to be used for validating the identity's traits. If set\nwill update the Identity's SchemaID.",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/identityState"
        },
        "traits": {
          "description": "Traits represent an identity's traits. The identity is able to create, modify, and delete traits\nin a self-service manner. The input will always be validated against the JSON Schema defined\nin `schema_id`.",
          "type": "object"
        }
      }
    },
    "CredentialsType": {
      "description": "and so on.",
      "type": "string",
      "title": "CredentialsType  represents several different credential types, like password credentials, passwordless credentials,"
    },
    "ID": {
      "type": "integer",
      "format": "int64"
    },
    "JSONRawMessage": {
      "type": "object",
      "title": "JSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger."
    },
    "Meta": {
      "description": "This might include a label and other information that can optionally\nbe used to render UIs.",
      "type": "object",
      "title": "A Node's Meta Information",
      "properties": {
        "label": {
          "$ref": "#/definitions/uiText"
        }
      }
    },
    "RecoveryAddress": {
      "type": "object",
      "required": [
        "id",
        "value",
        "via"
      ],
      "properties": {
        "created_at": {
          "description": "CreatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "updated_at": {
          "description": "UpdatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        },
        "value": {
          "type": "string"
        },
        "via": {
          "$ref": "#/definitions/RecoveryAddressType"
        }
      }
    },
    "RecoveryAddressType": {
      "type": "string"
    },
    "UUID": {"type": "string", "format": "uuid4"},
    "adminCreateIdentityBody": {
      "type": "object",
      "required": [
        "schema_id",
        "traits"
      ],
      "properties": {
        "schema_id": {
          "description": "SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.",
          "type": "string"
        },
        "traits": {
          "description": "Traits represent an identity's traits. The identity is able to create, modify, and delete traits\nin a self-service manner. The input will always be validated against the JSON Schema defined\nin `schema_url`.",
          "type": "object"
        }
      }
    },
    "adminCreateSelfServiceRecoveryLinkBody": {
      "type": "object",
      "required": [
        "identity_id"
      ],
      "properties": {
        "expires_in": {
          "description": "Link Expires In\n\nThe recovery link will expire at that point in time. Defaults to the configuration value of\n`selfservice.flows.recovery.request_lifespan`.",
          "type": "string",
          "pattern": "^[0-9]+(ns|us|ms|s|m|h)$"
        },
        "identity_id": {
          "$ref": "#/definitions/UUID"
        }
      }
    },
    "genericError": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "description": "The status code",
          "type": "integer",
          "format": "int64",
          "example": 404
        },
        "debug": {
          "description": "Debug information\n\nThis field is often not exposed to protect against leaking\nsensitive information.",
          "type": "string",
          "example": "SQL field \"foo\" is not a bool."
        },
        "details": {
          "description": "Further error details",
          "type": "object",
          "additionalProperties": true
        },
        "message": {
          "description": "Error message\n\nThe error's message.",
          "type": "string",
          "example": "The resource could not be found"
        },
        "reason": {
          "description": "A human-readable reason for the error",
          "type": "string",
          "example": "User with ID 1234 does not exist."
        },
        "request": {
          "description": "The request ID\n\nThe request ID is often exposed internally in order to trace\nerrors across service architectures. This is often a UUID.",
          "type": "string",
          "example": "d7ef54b1-ec15-46e6-bccb-524b82c035e6"
        },
        "status": {
          "description": "The status description",
          "type": "string",
          "example": "Not Found"
        }
      }
    },
    "healthNotReadyStatus": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains a list of errors that caused the not ready status.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "healthStatus": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Status always contains \"ok\".",
          "type": "string"
        }
      }
    },
    "identity": {
      "description": "An identity can be a real human, a service, an IoT device - everything that\ncan be described as an \"actor\" in a system.",
      "type": "object",
      "title": "Identity represents an Ory Kratos identity",
      "required": [
        "id",
        "schema_id",
        "schema_url",
        "traits"
      ],
      "properties": {
        "created_at": {
          "description": "CreatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        },
        "credentials": {
          "description": "Credentials represents all credentials that can be used for authenticating this identity.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/identityCredentials"
          }
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "recovery_addresses": {
          "description": "RecoveryAddresses contains all the addresses that can be used to recover an identity.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RecoveryAddress"
          },
          "x-omitempty": true
        },
        "schema_id": {
          "description": "SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.",
          "type": "string"
        },
        "schema_url": {
          "description": "SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.\n\nformat: url",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/identityState"
        },
        "state_changed_at": {
          "$ref": "#/definitions/nullTime"
        },
        "traits": {
          "$ref": "#/definitions/identityTraits"
        },
        "updated_at": {
          "description": "UpdatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        },
        "verifiable_addresses": {
          "description": "VerifiableAddresses contains all the addresses that can be verified by the user.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/verifiableIdentityAddress"
          },
          "x-omitempty": true
        }
      }
    },
    "identityCredentials": {
      "description": "Credentials represents a specific credential type",
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/JSONRawMessage"
        },
        "created_at": {
          "description": "CreatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        },
        "identifiers": {
          "description": "Identifiers represents a list of unique identifiers this credential type matches.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "type": {
          "$ref": "#/definitions/CredentialsType"
        },
        "updated_at": {
          "description": "UpdatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "identityList": {
      "type": "array",
      "title": "A list of identities.",
      "items": {
        "$ref": "#/definitions/identity"
      }
    },
    "identityState": {
      "description": "The state can either be `active` or `inactive`.",
      "type": "string",
      "title": "An Identity's State"
    },
    "identityTraits": {
      "description": "Traits represent an identity's traits. The identity is able to create, modify, and delete traits\nin a self-service manner. The input will always be validated against the JSON Schema defined\nin `schema_url`.",
      "type": "object"
    },
    "identityVerifiableAddressStatus": {
      "description": "VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema",
      "type": "string"
    },
    "identityVerifiableAddressType": {
      "description": "VerifiableAddressType must not exceed 16 characters as that is the limitation in the SQL Schema",
      "type": "string"
    },
    "jsonError": {
      "description": "The standard Ory JSON API error format.",
      "type": "object",
      "title": "JSON API Error Response",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/genericError"
        }
      }
    },
    "jsonSchema": {
      "description": "Raw JSON Schema",
      "type": "object"
    },
    "nullJsonRawMessage": {
      "description": "NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-",
      "type": "object"
    },
    "nullTime": {
      "type": "string",
      "format": "date-time",
      "title": "NullTime implements sql.NullTime functionality."
    },
    "selfServiceError": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "created_at": {
          "description": "CreatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "description": "The error",
          "type": "object"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "updated_at": {
          "description": "UpdatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "selfServiceFlowType": {
      "description": "The flow type can either be `api` or `browser`.",
      "type": "string",
      "title": "Type is the flow type."
    },
    "selfServiceLoginFlow": {
      "description": "This object represents a login flow. A login flow is initiated at the \"Initiate Login API / Browser Flow\"\nendpoint by a client.\n\nOnce a login flow is completed successfully, a session cookie or session token will be issued.",
      "type": "object",
      "title": "Login Flow",
      "required": [
        "id",
        "type",
        "expires_at",
        "issued_at",
        "request_url",
        "ui"
      ],
      "properties": {
        "active": {
          "$ref": "#/definitions/CredentialsType"
        },
        "created_at": {
          "description": "CreatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,\na new flow has to be initiated.",
          "type": "string",
          "format": "date-time"
        },
        "forced": {
          "description": "Forced stores whether this login flow should enforce re-authentication.",
          "type": "boolean"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the flow started.",
          "type": "string",
          "format": "date-time"
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used\nto forward information contained in the URL's path or query for example.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/selfServiceFlowType"
        },
        "ui": {
          "$ref": "#/definitions/uiContainer"
        },
        "updated_at": {
          "description": "UpdatedAt is a helper struct field for gobuffalo.pop.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "selfServiceLogoutUrl": {
      "type": "object",
      "required": [
        "logout_url"
      ],
      "properties": {
        "logout_url": {
          "description": "LogoutURL can be opened in a browser to\n\nformat: uri",
          "type": "string"
        }
      }
    },
    "selfServiceRecoveryFlow": {
      "description": "This request is used when an identity wants to recover their account.\n\nWe recommend reading the [Account Recovery Documentation](../self-service/flows/password-reset-account-recovery)",
      "type": "object",
      "title": "A Recovery Flow",
      "required": [
        "id",
        "expires_at",
        "issued_at",
        "request_url",
        "ui",
        "state"
      ],
      "properties": {
        "active": {
          "description": "Active, if set, contains the registration method that is being used. It is initially\nnot set.",
          "type": "string"
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the request expires. If the user still wishes to update the setting,\na new request has to be initiated.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the request occurred.",
          "type": "string",
          "format": "date-time"
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used\nto forward information contained in the URL's path or query for example.",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/selfServiceRecoveryFlowState"
        },
        "type": {
          "$ref": "#/definitions/selfServiceFlowType"
        },
        "ui": {
          "$ref": "#/definitions/uiContainer"
        }
      }
    },
    "selfServiceRecoveryFlowState": {
      "description": "The state represents the state of the recovery flow.\n\nchoose_method: ask the user to choose a method (e.g. recover account via email)\nsent_email: the email has been sent to the user\npassed_challenge: the request was successful and the recovery challenge was passed.",
      "type": "string",
      "title": "Recovery Flow State"
    },
    "selfServiceRecoveryLink": {
      "type": "object",
      "required": [
        "recovery_link"
      ],
      "properties": {
        "expires_at": {
          "description": "Recovery Link Expires At\n\nThe timestamp when the recovery link expires.",
          "type": "string",
          "format": "date-time"
        },
        "recovery_link": {
          "description": "Recovery Link\n\nThis link can be used to recover the account.",
          "type": "string"
        }
      }
    },
    "selfServiceRegistrationFlow": {
      "type": "object",
      "required": [
        "id",
        "expires_at",
        "issued_at",
        "request_url",
        "ui"
      ],
      "properties": {
        "active": {
          "$ref": "#/definitions/CredentialsType"
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to log in,\na new flow has to be initiated.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the flow occurred.",
          "type": "string",
          "format": "date-time"
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used\nto forward information contained in the URL's path or query for example.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/selfServiceFlowType"
        },
        "ui": {
          "$ref": "#/definitions/uiContainer"
        }
      }
    },
    "selfServiceSettingsFlow": {
      "description": "This flow is used when an identity wants to update settings\n(e.g. profile data, passwords, ...) in a selfservice manner.\n\nWe recommend reading the [User Settings Documentation](../self-service/flows/user-settings)",
      "type": "object",
      "title": "Flow represents a Settings Flow",
      "required": [
        "id",
        "expires_at",
        "issued_at",
        "request_url",
        "ui",
        "identity",
        "state"
      ],
      "properties": {
        "active": {
          "description": "Active, if set, contains the registration method that is being used. It is initially\nnot set.",
          "type": "string"
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the flow expires. If the user still wishes to update the setting,\na new flow has to be initiated.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "identity": {
          "$ref": "#/definitions/identity"
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the flow occurred.",
          "type": "string",
          "format": "date-time"
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used\nto forward information contained in the URL's path or query for example.",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/selfServiceSettingsFlowState"
        },
        "type": {
          "$ref": "#/definitions/selfServiceFlowType"
        },
        "ui": {
          "$ref": "#/definitions/uiContainer"
        }
      }
    },
    "selfServiceSettingsFlowState": {
      "description": "show_form: No user data has been collected, or it is invalid, and thus the form should be shown.\nsuccess: Indicates that the settings flow has been updated successfully with the provided data.\nDone will stay true when repeatedly checking. If set to true, done will revert back to false only\nwhen a flow with invalid (e.g. \"please use a valid phone number\") data was sent.",
      "type": "string",
      "title": "State represents the state of this flow. It knows two states:"
    },
    "selfServiceVerificationFlow": {
      "description": "Used to verify an out-of-band communication\nchannel such as an email address or a phone number.\n\nFor more information head over to: https://www.ory.sh/docs/kratos/selfservice/flows/verify-email-account-activation",
      "type": "object",
      "title": "A Verification Flow",
      "required": [
        "id",
        "type",
        "ui",
        "state"
      ],
      "properties": {
        "active": {
          "description": "Active, if set, contains the registration method that is being used. It is initially\nnot set.",
          "type": "string"
        },
        "expires_at": {
          "description": "ExpiresAt is the time (UTC) when the request expires. If the user still wishes to verify the address,\na new request has to be initiated.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "issued_at": {
          "description": "IssuedAt is the time (UTC) when the request occurred.",
          "type": "string",
          "format": "date-time"
        },
        "request_url": {
          "description": "RequestURL is the initial URL that was requested from Ory Kratos. It can be used\nto forward information contained in the URL's path or query for example.",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/selfServiceVerificationFlowState"
        },
        "type": {
          "$ref": "#/definitions/selfServiceFlowType"
        },
        "ui": {
          "$ref": "#/definitions/uiContainer"
        }
      }
    },
    "selfServiceVerificationFlowState": {
      "description": "The state represents the state of the verification flow.\n\nchoose_method: ask the user to choose a method (e.g. recover account via email)\nsent_email: the email has been sent to the user\npassed_challenge: the request was successful and the recovery challenge was passed.",
      "type": "string",
      "title": "Verification Flow State"
    },
    "session": {
      "description": "A Session",
      "type": "object",
      "required": [
        "id",
        "identity"
      ],
      "properties": {
        "active": {
          "description": "Whether or not the session is active.",
          "type": "boolean"
        },
        "authenticated_at": {
          "description": "The Session Authentication Timestamp\n\nWhen this session was authenticated at.",
          "type": "string",
          "format": "date-time"
        },
        "expires_at": {
          "description": "The Session Expiry\n\nWhen this session expires at.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "identity": {
          "$ref": "#/definitions/identity"
        },
        "issued_at": {
          "description": "The Session Issuance Timestamp\n\nWhen this session was authenticated at.",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "settingsProfileFormConfig": {
      "type": "object",
      "required": [
        "action",
        "method",
        "nodes"
      ],
      "properties": {
        "action": {
          "description": "Action should be used as the form action URL `\u003cform action=\"{{ .Action }}\" method=\"post\"\u003e`.",
          "type": "string"
        },
        "messages": {
          "$ref": "#/definitions/uiTexts"
        },
        "method": {
          "description": "Method is the form method (e.g. POST)",
          "type": "string"
        },
        "nodes": {
          "$ref": "#/definitions/uiNodes"
        }
      }
    },
    "submitSelfServiceLoginFlowBody": {
      "type": "object"
    },
    "submitSelfServiceLoginFlowWithOidcMethodBody": {
      "description": "SubmitSelfServiceLoginFlowWithOidcMethodBody is used to decode the login form payload\nwhen using the oidc method.",
      "type": "object",
      "required": [
        "traits",
        "method"
      ],
      "properties": {
        "csrf_token": {
          "description": "The CSRF Token",
          "type": "string"
        },
        "method": {
          "description": "Method to use\n\nThis field must be set to `oidc` when using the oidc method.",
          "type": "string"
        },
        "traits": {
          "description": "The provider to register with",
          "type": "string"
        }
      }
    },
    "submitSelfServiceLoginFlowWithPasswordMethodBody": {
      "type": "object",
      "title": "submitSelfServiceLoginFlowWithPasswordMethodBody is used to decode the login form payload.",
      "required": [
        "method",
        "password",
        "password_identifier"
      ],
      "properties": {
        "csrf_token": {
          "description": "Sending the anti-csrf token is only required for browser login flows.",
          "type": "string"
        },
        "method": {
          "description": "Method should be set to \"password\" when logging in using the identifier and password strategy.",
          "type": "string"
        },
        "password": {
          "description": "The user's password.",
          "type": "string"
        },
        "password_identifier": {
          "description": "Identifier is the email or username of the user trying to log in.",
          "type": "string"
        }
      }
    },
    "submitSelfServiceLogoutFlowWithoutBrowserBody": {
      "description": "nolint:deadcode,unused",
      "type": "object",
      "required": [
        "session_token"
      ],
      "properties": {
        "session_token": {
          "description": "The Session Token\n\nInvalidate this session token.",
          "type": "string"
        }
      }
    },
    "submitSelfServiceRecoveryFlowBody": {
      "type": "object"
    },
    "submitSelfServiceRecoveryFlowWithLinkMethodBody": {
      "type": "object",
      "required": [
        "email",
        "method"
      ],
      "properties": {
        "csrf_token": {
          "description": "Sending the anti-csrf token is only required for browser login flows.",
          "type": "string"
        },
        "email": {
          "description": "Email to Recover\n\nNeeds to be set when initiating the flow. If the email is a registered\nrecovery email, a recovery link will be sent. If the email is not known,\na email with details on what happened will be sent instead.\n\nformat: email",
          "type": "string"
        },
        "method": {
          "description": "Method supports `link` only right now.",
          "type": "string"
        }
      }
    },
    "submitSelfServiceRegistrationFlowBody": {
      "type": "object"
    },
    "submitSelfServiceRegistrationFlowWithOidcMethodBody": {
      "description": "SubmitSelfServiceRegistrationFlowWithOidcMethodBody is used to decode the registration form payload\nwhen using the oidc method.",
      "type": "object",
      "required": [
        "traits",
        "method"
      ],
      "properties": {
        "csrf_token": {
          "description": "The CSRF Token",
          "type": "string"
        },
        "method": {
          "description": "Method to use\n\nThis field must be set to `oidc` when using the oidc method.",
          "type": "string"
        },
        "traits": {
          "description": "The provider to register with",
          "type": "string"
        }
      }
    },
    "submitSelfServiceRegistrationFlowWithPasswordMethodBody": {
      "description": "SubmitSelfServiceRegistrationFlowWithPasswordMethodBody is used to decode the registration form payload\nwhen using the password method.",
      "type": "object",
      "required": [
        "password",
        "traits",
        "method"
      ],
      "properties": {
        "csrf_token": {
          "description": "The CSRF Token",
          "type": "string"
        },
        "method": {
          "description": "Method to use\n\nThis field must be set to `password` when using the password method.",
          "type": "string"
        },
        "password": {
          "description": "Password to sign the user up with",
          "type": "string"
        },
        "traits": {
          "description": "The identity's traits",
          "type": "object"
        }
      }
    },
    "submitSelfServiceSettingsFlowBody": {
      "type": "object"
    },
    "submitSelfServiceSettingsFlowWithOidcMethodBody": {
      "description": "nolint:deadcode,unused",
      "type": "object",
      "required": [
        "method"
      ],
      "properties": {
        "flow": {
          "description": "Flow ID is the flow's ID.\n\nin: query",
          "type": "string"
        },
        "link": {
          "description": "Link this provider\n\nEither this or `unlink` must be set.\n\ntype: string\nin: body",
          "type": "string"
        },
        "method": {
          "description": "Method\n\nShould be set to profile when trying to update a profile.",
          "type": "string"
        },
        "unlink": {
          "description": "Unlink this provider\n\nEither this or `link` must be set.\n\ntype: string\nin: body",
          "type": "string"
        }
      }
    },
    "submitSelfServiceSettingsFlowWithPasswordMethodBody": {
      "type": "object",
      "required": [
        "password",
        "method"
      ],
      "properties": {
        "csrf_token": {
          "description": "CSRFToken is the anti-CSRF token",
          "type": "string"
        },
        "method": {
          "description": "Method\n\nShould be set to password when trying to update a password.",
          "type": "string"
        },
        "password": {
          "description": "Password is the updated password",
          "type": "string"
        }
      }
    },
    "submitSelfServiceSettingsFlowWithProfileMethodBody": {
      "description": "nolint:deadcode,unused",
      "type": "object",
      "required": [
        "traits",
        "method"
      ],
      "properties": {
        "csrf_token": {
          "description": "The Anti-CSRF Token\n\nThis token is only required when performing browser flows.",
          "type": "string"
        },
        "method": {
          "description": "Method\n\nShould be set to profile when trying to update a profile.",
          "type": "string"
        },
        "traits": {
          "description": "Traits contains all of the identity's traits.",
          "type": "object"
        }
      }
    },
    "submitSelfServiceVerificationFlowBody": {
      "description": "nolint:deadcode,unused",
      "type": "object"
    },
    "submitSelfServiceVerificationFlowWithLinkMethodBody": {
      "type": "object",
      "required": [
        "email",
        "method"
      ],
      "properties": {
        "csrf_token": {
          "description": "Sending the anti-csrf token is only required for browser login flows.",
          "type": "string"
        },
        "email": {
          "description": "Email to Verify\n\nNeeds to be set when initiating the flow. If the email is a registered\nverification email, a verification link will be sent. If the email is not known,\na email with details on what happened will be sent instead.\n\nformat: email",
          "type": "string"
        },
        "method": {
          "description": "Method supports `link` only right now.",
          "type": "string"
        }
      }
    },
    "successfulSelfServiceLoginWithoutBrowser": {
      "description": "The Response for Login Flows via API",
      "type": "object",
      "required": [
        "session"
      ],
      "properties": {
        "session": {
          "$ref": "#/definitions/session"
        },
        "session_token": {
          "description": "The Session Token\n\nA session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization\nHeader:\n\nAuthorization: bearer ${session-token}\n\nThe session token is only issued for API flows, not for Browser flows!",
          "type": "string"
        }
      }
    },
    "successfulSelfServiceRegistrationWithoutBrowser": {
      "description": "The Response for Registration Flows via API",
      "type": "object",
      "required": [
        "identity"
      ],
      "properties": {
        "identity": {
          "$ref": "#/definitions/identity"
        },
        "session": {
          "$ref": "#/definitions/session"
        },
        "session_token": {
          "description": "The Session Token\n\nThis field is only set when the session hook is configured as a post-registration hook.\n\nA session token is equivalent to a session cookie, but it can be sent in the HTTP Authorization\nHeader:\n\nAuthorization: bearer ${session-token}\n\nThe session token is only issued for API flows, not for Browser flows!",
          "type": "string"
        }
      }
    },
    "successfulSelfServiceSettingsWithoutBrowser": {
      "description": "The Response for Settings Flows via API",
      "type": "object",
      "required": [
        "flow",
        "identity"
      ],
      "properties": {
        "flow": {
          "$ref": "#/definitions/selfServiceSettingsFlow"
        },
        "identity": {
          "$ref": "#/definitions/identity"
        }
      }
    },
    "uiContainer": {
      "description": "Container represents a HTML Form. The container can work with both HTTP Form and JSON requests",
      "type": "object",
      "required": [
        "action",
        "method",
        "nodes"
      ],
      "properties": {
        "action": {
          "description": "Action should be used as the form action URL `\u003cform action=\"{{ .Action }}\" method=\"post\"\u003e`.",
          "type": "string"
        },
        "messages": {
          "$ref": "#/definitions/uiTexts"
        },
        "method": {
          "description": "Method is the form method (e.g. POST)",
          "type": "string"
        },
        "nodes": {
          "$ref": "#/definitions/uiNodes"
        }
      }
    },
    "uiNode": {
      "description": "Nodes are represented as HTML elements or their native UI equivalents. For example,\na node can be an `\u003cimg\u003e` tag, or an `\u003cinput element\u003e` but also `some plain text`.",
      "type": "object",
      "title": "Node represents a flow's nodes",
      "required": [
        "type",
        "group",
        "attributes",
        "messages",
        "meta"
      ],
      "properties": {
        "attributes": {
          "$ref": "#/definitions/uiNodeAttributes"
        },
        "group": {
          "$ref": "#/definitions/uiNodeGroup"
        },
        "messages": {
          "$ref": "#/definitions/uiTexts"
        },
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "type": {
          "$ref": "#/definitions/uiNodeType"
        }
      }
    },
    "uiNodeAnchorAttributes": {
      "type": "object",
      "title": "AnchorAttributes represents the attributes of an anchor node.",
      "required": [
        "href",
        "title"
      ],
      "properties": {
        "href": {
          "description": "The link's href (destination) URL.\n\nformat: uri",
          "type": "string"
        },
        "title": {
          "$ref": "#/definitions/uiText"
        }
      }
    },
    "uiNodeAttributes": {
      "type": "object",
      "title": "Attributes represents a list of attributes (e.g. `href=\"foo\"` for links)."
    },
    "uiNodeGroup": {
      "type": "string"
    },
    "uiNodeImageAttributes": {
      "type": "object",
      "title": "ImageAttributes represents the attributes of an image node.",
      "required": [
        "src"
      ],
      "properties": {
        "src": {
          "description": "The image's source URL.\n\nformat: uri",
          "type": "string"
        }
      }
    },
    "uiNodeInputAttributeType": {
      "type": "string"
    },
    "uiNodeInputAttributes": {
      "description": "InputAttributes represents the attributes of an input node",
      "type": "object",
      "required": [
        "name",
        "type",
        "disabled"
      ],
      "properties": {
        "disabled": {
          "description": "Sets the input's disabled field to true or false.",
          "type": "boolean"
        },
        "label": {
          "$ref": "#/definitions/uiText"
        },
        "name": {
          "description": "The input's element name.",
          "type": "string"
        },
        "pattern": {
          "description": "The input's pattern.",
          "type": "string"
        },
        "required": {
          "description": "Mark this input field as required.",
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/uiNodeInputAttributeType"
        },
        "value": {
          "description": "The input's value.",
          "type": "object"
        }
      }
    },
    "uiNodeTextAttributes": {
      "type": "object",
      "title": "TextAttributes represents the attributes of a text node.",
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "$ref": "#/definitions/uiText"
        }
      }
    },
    "uiNodeType": {
      "type": "string"
    },
    "uiNodes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/uiNode"
      }
    },
    "uiText": {
      "type": "object",
      "required": [
        "id",
        "text",
        "type"
      ],
      "properties": {
        "context": {
          "description": "The message's context. Useful when customizing messages.",
          "type": "object"
        },
        "id": {
          "$ref": "#/definitions/ID"
        },
        "text": {
          "description": "The message text. Written in american english.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/uiTextType"
        }
      }
    },
    "uiTextType": {
      "type": "string"
    },
    "uiTexts": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/uiText"
      }
    },
    "verifiableIdentityAddress": {
      "description": "VerifiableAddress is an identity's verifiable address",
      "type": "object",
      "required": [
        "id",
        "value",
        "verified",
        "via",
        "status"
      ],
      "properties": {
        "created_at": {
          "description": "When this entry was created",
          "type": "string",
          "format": "date-time",
          "example": "2014-01-01T23:28:56.782Z"
        },
        "id": {
          "$ref": "#/definitions/UUID"
        },
        "status": {
          "$ref": "#/definitions/identityVerifiableAddressStatus"
        },
        "updated_at": {
          "description": "When this entry was last updated",
          "type": "string",
          "format": "date-time",
          "example": "2014-01-01T23:28:56.782Z"
        },
        "value": {
          "description": "The address value\n\nexample foo@user.com",
          "type": "string"
        },
        "verified": {
          "description": "Indicates if the address has already been verified",
          "type": "boolean",
          "example": true
        },
        "verified_at": {
          "$ref": "#/definitions/nullTime"
        },
        "via": {
          "$ref": "#/definitions/identityVerifiableAddressType"
        }
      }
    },
    "version": {
      "type": "object",
      "properties": {
        "version": {
          "description": "Version is the service's version.",
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "emptyResponse": {
      "description": "Empty responses are sent when, for example, resources are deleted. The HTTP status code for empty responses is typically 201."
    }
  },
  "securityDefinitions": {
    "oryAccessToken": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "x-forwarded-proto": "string",
  "x-request-id": "string"
}