/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UiNodeSelectAttributes SelectAttributes represents the attributes of a select node
type UiNodeSelectAttributes struct {
	// Sets the input's disabled field to true or false.
	Disabled bool    `json:"disabled"`
	Label    *UiText `json:"label,omitempty"`
	// The input's element name.
	Name string `json:"name"`
	// NodeType represents this node's types. It is a mirror of `node.type` and is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is \"select\".
	NodeType string `json:"node_type"`
	// Options represents the options for a select node.
	Options []UiNodeSelectOption `json:"options"`
	// Mark this input field as required.
	Required *bool `json:"required,omitempty"`
	// The input's value.
	Value map[string]interface{} `json:"value,omitempty"`
}

// NewUiNodeSelectAttributes instantiates a new UiNodeSelectAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUiNodeSelectAttributes(disabled bool, name string, nodeType string, options []UiNodeSelectOption) *UiNodeSelectAttributes {
	this := UiNodeSelectAttributes{}
	this.Disabled = disabled
	this.Name = name
	this.NodeType = nodeType
	this.Options = options
	return &this
}

// NewUiNodeSelectAttributesWithDefaults instantiates a new UiNodeSelectAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUiNodeSelectAttributesWithDefaults() *UiNodeSelectAttributes {
	this := UiNodeSelectAttributes{}
	return &this
}

// GetDisabled returns the Disabled field value
func (o *UiNodeSelectAttributes) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *UiNodeSelectAttributes) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *UiNodeSelectAttributes) SetDisabled(v bool) {
	o.Disabled = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *UiNodeSelectAttributes) GetLabel() UiText {
	if o == nil || o.Label == nil {
		var ret UiText
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiNodeSelectAttributes) GetLabelOk() (*UiText, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *UiNodeSelectAttributes) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given UiText and assigns it to the Label field.
func (o *UiNodeSelectAttributes) SetLabel(v UiText) {
	o.Label = &v
}

// GetName returns the Name field value
func (o *UiNodeSelectAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UiNodeSelectAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UiNodeSelectAttributes) SetName(v string) {
	o.Name = v
}

// GetNodeType returns the NodeType field value
func (o *UiNodeSelectAttributes) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *UiNodeSelectAttributes) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *UiNodeSelectAttributes) SetNodeType(v string) {
	o.NodeType = v
}

// GetOptions returns the Options field value
func (o *UiNodeSelectAttributes) GetOptions() []UiNodeSelectOption {
	if o == nil {
		var ret []UiNodeSelectOption
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *UiNodeSelectAttributes) GetOptionsOk() ([]UiNodeSelectOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *UiNodeSelectAttributes) SetOptions(v []UiNodeSelectOption) {
	o.Options = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *UiNodeSelectAttributes) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiNodeSelectAttributes) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *UiNodeSelectAttributes) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *UiNodeSelectAttributes) SetRequired(v bool) {
	o.Required = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UiNodeSelectAttributes) GetValue() map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UiNodeSelectAttributes) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UiNodeSelectAttributes) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *UiNodeSelectAttributes) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o UiNodeSelectAttributes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["node_type"] = o.NodeType
	}
	if true {
		toSerialize["options"] = o.Options
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableUiNodeSelectAttributes struct {
	value *UiNodeSelectAttributes
	isSet bool
}

func (v NullableUiNodeSelectAttributes) Get() *UiNodeSelectAttributes {
	return v.value
}

func (v *NullableUiNodeSelectAttributes) Set(val *UiNodeSelectAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableUiNodeSelectAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableUiNodeSelectAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiNodeSelectAttributes(val *UiNodeSelectAttributes) *NullableUiNodeSelectAttributes {
	return &NullableUiNodeSelectAttributes{value: val, isSet: true}
}

func (v NullableUiNodeSelectAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiNodeSelectAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
