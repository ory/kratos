/*
Ory Identities API

This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.

API version:
Contact: office@ory.sh
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// checks if the IdentityWithCredentialsSamlConfigProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityWithCredentialsSamlConfigProvider{}

// IdentityWithCredentialsSamlConfigProvider Payload of specific SAML provider
type IdentityWithCredentialsSamlConfigProvider struct {
	Organization NullableString `json:"organization,omitempty"`
	// The SAML provider to link the subject to.
	Provider string `json:"provider"`
	// The unique subject of the SAML connection. This value must be immutable at the source.
	Subject              string `json:"subject"`
	AdditionalProperties map[string]interface{}
}

type _IdentityWithCredentialsSamlConfigProvider IdentityWithCredentialsSamlConfigProvider

// NewIdentityWithCredentialsSamlConfigProvider instantiates a new IdentityWithCredentialsSamlConfigProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityWithCredentialsSamlConfigProvider(provider string, subject string) *IdentityWithCredentialsSamlConfigProvider {
	this := IdentityWithCredentialsSamlConfigProvider{}
	this.Provider = provider
	this.Subject = subject
	return &this
}

// NewIdentityWithCredentialsSamlConfigProviderWithDefaults instantiates a new IdentityWithCredentialsSamlConfigProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityWithCredentialsSamlConfigProviderWithDefaults() *IdentityWithCredentialsSamlConfigProvider {
	this := IdentityWithCredentialsSamlConfigProvider{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityWithCredentialsSamlConfigProvider) GetOrganization() string {
	if o == nil || IsNil(o.Organization.Get()) {
		var ret string
		return ret
	}
	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityWithCredentialsSamlConfigProvider) GetOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// HasOrganization returns a boolean if a field has been set.
func (o *IdentityWithCredentialsSamlConfigProvider) HasOrganization() bool {
	if o != nil && o.Organization.IsSet() {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given NullableString and assigns it to the Organization field.
func (o *IdentityWithCredentialsSamlConfigProvider) SetOrganization(v string) {
	o.Organization.Set(&v)
}

// SetOrganizationNil sets the value for Organization to be an explicit nil
func (o *IdentityWithCredentialsSamlConfigProvider) SetOrganizationNil() {
	o.Organization.Set(nil)
}

// UnsetOrganization ensures that no value is present for Organization, not even an explicit nil
func (o *IdentityWithCredentialsSamlConfigProvider) UnsetOrganization() {
	o.Organization.Unset()
}

// GetProvider returns the Provider field value
func (o *IdentityWithCredentialsSamlConfigProvider) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *IdentityWithCredentialsSamlConfigProvider) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *IdentityWithCredentialsSamlConfigProvider) SetProvider(v string) {
	o.Provider = v
}

// GetSubject returns the Subject field value
func (o *IdentityWithCredentialsSamlConfigProvider) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *IdentityWithCredentialsSamlConfigProvider) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *IdentityWithCredentialsSamlConfigProvider) SetSubject(v string) {
	o.Subject = v
}

func (o IdentityWithCredentialsSamlConfigProvider) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityWithCredentialsSamlConfigProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Organization.IsSet() {
		toSerialize["organization"] = o.Organization.Get()
	}
	toSerialize["provider"] = o.Provider
	toSerialize["subject"] = o.Subject

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IdentityWithCredentialsSamlConfigProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityWithCredentialsSamlConfigProvider := _IdentityWithCredentialsSamlConfigProvider{}

	err = json.Unmarshal(data, &varIdentityWithCredentialsSamlConfigProvider)

	if err != nil {
		return err
	}

	*o = IdentityWithCredentialsSamlConfigProvider(varIdentityWithCredentialsSamlConfigProvider)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "organization")
		delete(additionalProperties, "provider")
		delete(additionalProperties, "subject")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIdentityWithCredentialsSamlConfigProvider struct {
	value *IdentityWithCredentialsSamlConfigProvider
	isSet bool
}

func (v NullableIdentityWithCredentialsSamlConfigProvider) Get() *IdentityWithCredentialsSamlConfigProvider {
	return v.value
}

func (v *NullableIdentityWithCredentialsSamlConfigProvider) Set(val *IdentityWithCredentialsSamlConfigProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityWithCredentialsSamlConfigProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityWithCredentialsSamlConfigProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityWithCredentialsSamlConfigProvider(val *IdentityWithCredentialsSamlConfigProvider) *NullableIdentityWithCredentialsSamlConfigProvider {
	return &NullableIdentityWithCredentialsSamlConfigProvider{value: val, isSet: true}
}

func (v NullableIdentityWithCredentialsSamlConfigProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityWithCredentialsSamlConfigProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
