/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// PasswordCredential The password of the user. It represents a cleartext or hashed user password.
type PasswordCredential struct {
	// This field must be true if the value represents a hashed password. Otherwise the value is assumed to be a cleartext password and it will be hashed before storing.
	IsHashed bool `json:"is_hashed"`
	// Value represents the value of the password in clear text or hashed
	Value string `json:"value"`
}

// NewPasswordCredential instantiates a new PasswordCredential object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPasswordCredential(isHashed bool, value string) *PasswordCredential {
	this := PasswordCredential{}
	this.IsHashed = isHashed
	this.Value = value
	return &this
}

// NewPasswordCredentialWithDefaults instantiates a new PasswordCredential object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPasswordCredentialWithDefaults() *PasswordCredential {
	this := PasswordCredential{}
	return &this
}

// GetIsHashed returns the IsHashed field value
func (o *PasswordCredential) GetIsHashed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsHashed
}

// GetIsHashedOk returns a tuple with the IsHashed field value
// and a boolean to check if the value has been set.
func (o *PasswordCredential) GetIsHashedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsHashed, true
}

// SetIsHashed sets field value
func (o *PasswordCredential) SetIsHashed(v bool) {
	o.IsHashed = v
}

// GetValue returns the Value field value
func (o *PasswordCredential) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *PasswordCredential) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *PasswordCredential) SetValue(v string) {
	o.Value = v
}

func (o PasswordCredential) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["is_hashed"] = o.IsHashed
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullablePasswordCredential struct {
	value *PasswordCredential
	isSet bool
}

func (v NullablePasswordCredential) Get() *PasswordCredential {
	return v.value
}

func (v *NullablePasswordCredential) Set(val *PasswordCredential) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordCredential) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordCredential(val *PasswordCredential) *NullablePasswordCredential {
	return &NullablePasswordCredential{value: val, isSet: true}
}

func (v NullablePasswordCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
