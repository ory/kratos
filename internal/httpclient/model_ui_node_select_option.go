/*
 * Ory Kratos API
 *
 * Documentation for all public and administrative Ory Kratos APIs. Public and administrative APIs are exposed on different ports. Public APIs can face the public internet without any protection while administrative APIs should never be exposed without prior authorization. To protect the administative API port you should use something like Nginx, Ory Oathkeeper, or any other technology capable of authorizing incoming requests.
 *
 * API version: 1.0.0
 * Contact: hi@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// UiNodeSelectOption InputAttributeOption represents an option for a Select node
type UiNodeSelectOption struct {
	// The label of the option for display
	Label string `json:"label"`
	// The value of the option
	Value string `json:"value"`
}

// NewUiNodeSelectOption instantiates a new UiNodeSelectOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUiNodeSelectOption(label string, value string) *UiNodeSelectOption {
	this := UiNodeSelectOption{}
	this.Label = label
	this.Value = value
	return &this
}

// NewUiNodeSelectOptionWithDefaults instantiates a new UiNodeSelectOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUiNodeSelectOptionWithDefaults() *UiNodeSelectOption {
	this := UiNodeSelectOption{}
	return &this
}

// GetLabel returns the Label field value
func (o *UiNodeSelectOption) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *UiNodeSelectOption) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *UiNodeSelectOption) SetLabel(v string) {
	o.Label = v
}

// GetValue returns the Value field value
func (o *UiNodeSelectOption) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *UiNodeSelectOption) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *UiNodeSelectOption) SetValue(v string) {
	o.Value = v
}

func (o UiNodeSelectOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableUiNodeSelectOption struct {
	value *UiNodeSelectOption
	isSet bool
}

func (v NullableUiNodeSelectOption) Get() *UiNodeSelectOption {
	return v.value
}

func (v *NullableUiNodeSelectOption) Set(val *UiNodeSelectOption) {
	v.value = val
	v.isSet = true
}

func (v NullableUiNodeSelectOption) IsSet() bool {
	return v.isSet
}

func (v *NullableUiNodeSelectOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUiNodeSelectOption(val *UiNodeSelectOption) *NullableUiNodeSelectOption {
	return &NullableUiNodeSelectOption{value: val, isSet: true}
}

func (v NullableUiNodeSelectOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUiNodeSelectOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
