/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.
 *
 * API version:
 * Contact: office@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IdentityPatchError Error for a single identity patch
type IdentityPatchError struct {
	Error *GenericError          `json:"error,omitempty"`
	Patch *IdentityPatchResponse `json:"patch,omitempty"`
}

// NewIdentityPatchError instantiates a new IdentityPatchError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityPatchError() *IdentityPatchError {
	this := IdentityPatchError{}
	return &this
}

// NewIdentityPatchErrorWithDefaults instantiates a new IdentityPatchError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityPatchErrorWithDefaults() *IdentityPatchError {
	this := IdentityPatchError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *IdentityPatchError) GetError() GenericError {
	if o == nil || o.Error == nil {
		var ret GenericError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPatchError) GetErrorOk() (*GenericError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *IdentityPatchError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given GenericError and assigns it to the Error field.
func (o *IdentityPatchError) SetError(v GenericError) {
	o.Error = &v
}

// GetPatch returns the Patch field value if set, zero value otherwise.
func (o *IdentityPatchError) GetPatch() IdentityPatchResponse {
	if o == nil || o.Patch == nil {
		var ret IdentityPatchResponse
		return ret
	}
	return *o.Patch
}

// GetPatchOk returns a tuple with the Patch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityPatchError) GetPatchOk() (*IdentityPatchResponse, bool) {
	if o == nil || o.Patch == nil {
		return nil, false
	}
	return o.Patch, true
}

// HasPatch returns a boolean if a field has been set.
func (o *IdentityPatchError) HasPatch() bool {
	if o != nil && o.Patch != nil {
		return true
	}

	return false
}

// SetPatch gets a reference to the given IdentityPatchResponse and assigns it to the Patch field.
func (o *IdentityPatchError) SetPatch(v IdentityPatchResponse) {
	o.Patch = &v
}

func (o IdentityPatchError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Patch != nil {
		toSerialize["patch"] = o.Patch
	}
	return json.Marshal(toSerialize)
}

type NullableIdentityPatchError struct {
	value *IdentityPatchError
	isSet bool
}

func (v NullableIdentityPatchError) Get() *IdentityPatchError {
	return v.value
}

func (v *NullableIdentityPatchError) Set(val *IdentityPatchError) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityPatchError) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityPatchError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityPatchError(val *IdentityPatchError) *NullableIdentityPatchError {
	return &NullableIdentityPatchError{value: val, isSet: true}
}

func (v NullableIdentityPatchError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityPatchError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
