/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.
 *
 * API version:
 * Contact: office@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"fmt"
)

// UpdateVerificationFlowBody - nolint:deadcode,unused
type UpdateVerificationFlowBody struct {
	UpdateVerificationFlowWithLinkMethod *UpdateVerificationFlowWithLinkMethod
}

// UpdateVerificationFlowWithLinkMethodAsUpdateVerificationFlowBody is a convenience function that returns UpdateVerificationFlowWithLinkMethod wrapped in UpdateVerificationFlowBody
func UpdateVerificationFlowWithLinkMethodAsUpdateVerificationFlowBody(v *UpdateVerificationFlowWithLinkMethod) UpdateVerificationFlowBody {
	return UpdateVerificationFlowBody{
		UpdateVerificationFlowWithLinkMethod: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *UpdateVerificationFlowBody) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into UpdateVerificationFlowWithLinkMethod
	err = newStrictDecoder(data).Decode(&dst.UpdateVerificationFlowWithLinkMethod)
	if err == nil {
		jsonUpdateVerificationFlowWithLinkMethod, _ := json.Marshal(dst.UpdateVerificationFlowWithLinkMethod)
		if string(jsonUpdateVerificationFlowWithLinkMethod) == "{}" { // empty struct
			dst.UpdateVerificationFlowWithLinkMethod = nil
		} else {
			match++
		}
	} else {
		dst.UpdateVerificationFlowWithLinkMethod = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.UpdateVerificationFlowWithLinkMethod = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(UpdateVerificationFlowBody)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(UpdateVerificationFlowBody)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src UpdateVerificationFlowBody) MarshalJSON() ([]byte, error) {
	if src.UpdateVerificationFlowWithLinkMethod != nil {
		return json.Marshal(&src.UpdateVerificationFlowWithLinkMethod)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *UpdateVerificationFlowBody) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.UpdateVerificationFlowWithLinkMethod != nil {
		return obj.UpdateVerificationFlowWithLinkMethod
	}

	// all schemas are nil
	return nil
}

type NullableUpdateVerificationFlowBody struct {
	value *UpdateVerificationFlowBody
	isSet bool
}

func (v NullableUpdateVerificationFlowBody) Get() *UpdateVerificationFlowBody {
	return v.value
}

func (v *NullableUpdateVerificationFlowBody) Set(val *UpdateVerificationFlowBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVerificationFlowBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVerificationFlowBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVerificationFlowBody(val *UpdateVerificationFlowBody) *NullableUpdateVerificationFlowBody {
	return &NullableUpdateVerificationFlowBody{value: val, isSet: true}
}

func (v NullableUpdateVerificationFlowBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVerificationFlowBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
