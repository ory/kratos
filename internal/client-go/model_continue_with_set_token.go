/*
 * Ory Identities API
 *
 * This is the API specification for Ory Identities with features such as registration, login, recovery, account verification, profile settings, password reset, identity management, session management, email and sms delivery, and more.
 *
 * API version:
 * Contact: office@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ContinueWithSetToken Indicates that a session was issued, and the application should use this token for authenticated requests
type ContinueWithSetToken struct {
	// Action will always be `set_token` set_token ContinueWithActionSetToken verification_ui ContinueWithActionVerificationUI
	Action string `json:"action"`
	// Token is the token of the session
	Token string `json:"token"`
}

// NewContinueWithSetToken instantiates a new ContinueWithSetToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContinueWithSetToken(action string, token string) *ContinueWithSetToken {
	this := ContinueWithSetToken{}
	this.Action = action
	this.Token = token
	return &this
}

// NewContinueWithSetTokenWithDefaults instantiates a new ContinueWithSetToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContinueWithSetTokenWithDefaults() *ContinueWithSetToken {
	this := ContinueWithSetToken{}
	return &this
}

// GetAction returns the Action field value
func (o *ContinueWithSetToken) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ContinueWithSetToken) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ContinueWithSetToken) SetAction(v string) {
	o.Action = v
}

// GetToken returns the Token field value
func (o *ContinueWithSetToken) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *ContinueWithSetToken) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *ContinueWithSetToken) SetToken(v string) {
	o.Token = v
}

func (o ContinueWithSetToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["token"] = o.Token
	}
	return json.Marshal(toSerialize)
}

type NullableContinueWithSetToken struct {
	value *ContinueWithSetToken
	isSet bool
}

func (v NullableContinueWithSetToken) Get() *ContinueWithSetToken {
	return v.value
}

func (v *NullableContinueWithSetToken) Set(val *ContinueWithSetToken) {
	v.value = val
	v.isSet = true
}

func (v NullableContinueWithSetToken) IsSet() bool {
	return v.isSet
}

func (v *NullableContinueWithSetToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContinueWithSetToken(val *ContinueWithSetToken) *NullableContinueWithSetToken {
	return &NullableContinueWithSetToken{value: val, isSet: true}
}

func (v NullableContinueWithSetToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContinueWithSetToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
