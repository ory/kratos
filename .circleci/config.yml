version: 2.1

orbs:
  changelog: ory/changelog@0.1.10
  goreleaser: ory/goreleaser@0.1.37
  slack: circleci/slack@3.4.2
  sdk: ory/sdk@0.1.52
  docs: ory/docs@0.0.12
  nancy: ory/nancy@0.0.19
  golangci: ory/golangci@0.0.18
  prettier: ory/prettier@0.0.11
  go: circleci/go@1.5.0
  browser-tools: circleci/browser-tools@1.2.3
  node: circleci/node@4.2.0

jobs:
  test:
    docker:
      - image: cimg/go:1.16-node
        environment:
          TEST_MAILHOG_SMTP: smtp://test:test@127.0.0.1:1025/?disable_starttls=true
          TEST_MAILHOG_API: http://127.0.0.1:8025
          TEST_SELFSERVICE_OIDC_HYDRA_ADMIN: http://127.0.0.1:4445
          TEST_SELFSERVICE_OIDC_HYDRA_PUBLIC: http://127.0.0.1:4444
          TEST_SELFSERVICE_OIDC_HYDRA_INTEGRATION_ADDR: http://127.0.0.1:4499
          TEST_DATABASE_POSTGRESQL: postgres://test:test@localhost:5432/postgres?sslmode=disable
          TEST_DATABASE_MYSQL: mysql://root:test@(localhost:3306)/mysql?parseTime=true&multiStatements=true
          TEST_DATABASE_COCKROACHDB: cockroach://root@localhost:26257/defaultdb?sslmode=disable
      - image: mailhog/mailhog:v1.0.0
        command: MailHog -invite-jim -jim-linkspeed-affect=0.25 -jim-reject-auth=0.25 -jim-reject-recipient=0.25 -jim-reject-sender=0.25 -jim-disconnect=0.25 -jim-linkspeed-min=1250 -jim-linkspeed-max=12500
      - image: postgres:9.6
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: postgres
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=test
      - image: cockroachdb/cockroach:v20.2.5
        command: start-single-node --insecure
      - image: oryd/hydra:v1.4.10
        environment:
          DSN: memory
          URLS_SELF_ISSUER: http://127.0.0.1:4444/
          URLS_LOGIN: http://127.0.0.1:4499/login
          URLS_CONSENT: http://127.0.0.1:4499/consent
        command: serve all --dangerous-force-http
    steps:
      - checkout
      - setup_remote_docker

      - go/load-cache:
          key: ory-kratos-go-mod-v1
      - go/mod-download
      - go/save-cache:
          key: ory-kratos-go-mod-v1

      - prettier/install
      - prettier/check
      - prettier/install:
          dir: docs/
      - prettier/check:
          dir: docs/
      - goreleaser/install
      - goreleaser/check

      - golangci/install
      - golangci/lint
      - node/install-packages
      - run: timeout 15 sh -c 'until nc -z $0 $1; do sleep 1; done' 127.0.0.1 4444
      - run: make install
      - run: make test-docs
      - run: make test-coverage
      - run: |
          bash <(curl -s https://codecov.io/bash)

  test-e2e-1:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          TEST_DATABASE_MYSQL: mysql://root:test@(localhost:3306)/mysql?parseTime=true&multiStatements=true
          TEST_DATABASE_COCKROACHDB: cockroach://root@localhost:26257/defaultdb?sslmode=disable
          TEST_DATABASE_POSTGRESQL: postgres://test:test@localhost:5432/kratos?sslmode=disable
      - image: postgres:9.6
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: kratos
      - image: cockroachdb/cockroach:v21.1.9
        command: start-single-node --insecure
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=test
      - image: oryd/mailslurper:latest-smtps
    steps:
      - browser-tools/install-browser-tools
      - checkout

      - restore_cache:
          keys:
            - v3-e2e-deps-{{ checksum "package-lock.json" }}-{{ checksum "test/e2e/package-lock.json" }}
      - run: npm ci
      - run: cd test/e2e; npm ci
      - run: sudo npm i -g expo-cli
      - save_cache:
          key: v3-e2e-deps-{{ checksum "package-lock.json" }}-{{ checksum "test/e2e/package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache # cypress
            - ~/.npm/node_modules # global npm
            - test/e2e/node_modules # e2e npm

      - go/load-cache
      - go/mod-download
      - go/save-cache

      - run: npm config set prefix ~/.npm/node_modules

      - run:
          description: "Install selfservice-ui-node"
          command: |
            node_ui_dir="$(mktemp -d -t ci-XXXXXXXXXX)/kratos-selfservice-ui-node"
            echo "export NODE_UI_PATH=$node_ui_dir" >> $BASH_ENV

            git clone https://github.com/ory/kratos-selfservice-ui-node.git --depth 1 --branch master "$node_ui_dir"
            cd "$node_ui_dir"
            npm i
            npm run build

      - run:
          description: "Install selfservice-ui-react-native"
          command: |
            rn_ui_dir="$(mktemp -d -t ci-XXXXXXXXXX)/kratos-selfservice-ui-react-native"
            echo "export RN_UI_PATH=$rn_ui_dir" >> $BASH_ENV

            git clone https://github.com/ory/kratos-selfservice-ui-react-native.git --depth 1 --branch master "$rn_ui_dir"
            cd "$rn_ui_dir"
            npm i

      - run:
          description: "Unset DISPLAY - see https://github.com/cypress-io/cypress/issues/4034"
          command: |
            echo "unset DISPLAY" >> $BASH_ENV

      - run:
          description: Run postrgres e2e test
          command: |
            source $BASH_ENV
            ./test/e2e/run.sh postgres
      - run:
          description: Run cockroach e2e test
          command: |
            source $BASH_ENV
            ./test/e2e/run.sh cockroach

  test-e2e-2:
    docker:
      - image: oryd/e2e-env:latest
        environment:
          TEST_DATABASE_MYSQL: mysql://root:test@(localhost:3306)/mysql?parseTime=true&multiStatements=true
          TEST_DATABASE_COCKROACHDB: cockroach://root@localhost:26257/defaultdb?sslmode=disable
          TEST_DATABASE_POSTGRESQL: postgres://test:test@localhost:5432/kratos?sslmode=disable
      - image: postgres:9.6
        environment:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: kratos
      - image: cockroachdb/cockroach:v21.1.9
        command: start-single-node --insecure
      - image: mysql:5.7
        environment:
          - MYSQL_ROOT_PASSWORD=test
      - image: oryd/mailslurper:latest-smtps
    steps:
      - browser-tools/install-browser-tools
      - checkout

      - restore_cache:
          keys:
            - v3-e2e-deps-{{ checksum "package-lock.json" }}-{{ checksum "test/e2e/package-lock.json" }}
      - run: npm ci
      - run: cd test/e2e; npm ci
      - run: sudo npm i -g expo-cli
      - save_cache:
          key: v3-e2e-deps-{{ checksum "package-lock.json" }}-{{ checksum "test/e2e/package-lock.json" }}
          paths:
            - node_modules
            - ~/.cache # cypress
            - ~/.npm/node_modules # global npm
            - test/e2e/node_modules # e2e npm

      - go/load-cache
      - go/mod-download
      - go/save-cache

      - run: npm config set prefix ~/.npm/node_modules

      - run:
          description: "Install selfservice-ui-node"
          command: |
            node_ui_dir="$(mktemp -d -t ci-XXXXXXXXXX)/kratos-selfservice-ui-node"
            echo "export NODE_UI_PATH=$node_ui_dir" >> $BASH_ENV

            git clone https://github.com/ory/kratos-selfservice-ui-node.git --depth 1 --branch master "$node_ui_dir"
            cd "$node_ui_dir"
            npm i
            npm run build

      - run:
          description: "Install selfservice-ui-react-native"
          command: |
            rn_ui_dir="$(mktemp -d -t ci-XXXXXXXXXX)/kratos-selfservice-ui-react-native"
            echo "export RN_UI_PATH=$rn_ui_dir" >> $BASH_ENV

            git clone https://github.com/ory/kratos-selfservice-ui-react-native.git --depth 1 --branch master "$rn_ui_dir"
            cd "$rn_ui_dir"
            npm i

      - run:
          description: "Unset DISPLAY - see https://github.com/cypress-io/cypress/issues/4034"
          command: |
            echo "unset DISPLAY" >> $BASH_ENV

      - run:
          description: Run sqlite e2e test
          command: |
            source $BASH_ENV
            ./test/e2e/run.sh sqlite
      - run:
          description: Run mysql e2e test
          command: |
            source $BASH_ENV
            ./test/e2e/run.sh mysql

workflows:
  tbr:
    jobs:
      - test-e2e-1:
          filters:
            tags:
              only: /.*/
      - test-e2e-2:
          filters:
            tags:
              only: /.*/
      - test:
          filters:
            tags:
              only: /.*/
      - sdk/test:
          specpath: spec/api.json
          generate: make sdk
          filters:
            tags:
              only: /.*/
      - sdk/generate-openapi:
          requires:
            - test
            - test-e2e-1
            - test-e2e-2
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /master/
      - docs/cli
      - docs/build:
          swag-spec-location: spec/api.json
          filters:
            tags:
              only: /.*/
            branches:
              only: master
      - sdk/release-openapi:
          swagpath: spec/api.json
          requires:
            - test
            - test-e2e-1
            - test-e2e-2
            - sdk/generate-openapi
            - sdk/test
            - goreleaser/release
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - changelog/generate:
          requires:
            - test
            - test-e2e-1
            - test-e2e-2
          filters:
            tags:
              only: /.*/
            branches:
              only: master
      - goreleaser/release:
          requires:
            - test
            - test-e2e-1
            - test-e2e-2
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - goreleaser/render-version-schema:
          schema-path: embedx/config.schema.json
          requires:
            - goreleaser/release
          filters:
            tags:
              only: /.*/
      - goreleaser/newsletter-draft:
          chimp-list: f605a41b53
          chimp-segment: 6479477
          requires:
            - goreleaser/release
          filters:
            tags:
              only: /.*/
      - slack/approval-notification:
          message: Pending approval
          channel: release-automation
          requires:
            - goreleaser/newsletter-draft
          filters:
            tags:
              only: /.*/
      - newsletter-approval:
          type: approval
          requires:
            - goreleaser/newsletter-draft
          filters:
            tags:
              only: /.*/
      - goreleaser/newsletter-send:
          chimp-list: f605a41b53
          requires:
            - newsletter-approval
          filters:
            tags:
              only: /.*/
